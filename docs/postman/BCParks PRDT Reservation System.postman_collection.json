{
	"info": {
		"_postman_id": "ccbc1197-496c-425b-bd89-497e76af3237",
		"name": "BCParks PRDT Reservation System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43291325"
	},
	"item": [
		{
			"name": "Geozones",
			"item": [
				{
					"name": "Geozone by Collection ID",
					"item": [
						{
							"name": "Batch Post Geozone by Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.response.to.have.jsonBody(\"data\");",
											"    pm.response.to.have.jsonBody(\"msg\");",
											"    pm.response.to.have.jsonBody(\"context\");",
											"});",
											"",
											"// Test for response body data field value",
											"pm.test(\"Data field value is true\", function () {",
											"    pm.expect(pm.response.json().data).to.equal(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"displayName\": \"Cheakamus 4\",\r\n        \"gzCollectionId\": \"997\",\r\n        \"orcs\": 997,\r\n        \"schema\": \"geozone\",\r\n        \"location\": {\r\n            \"type\": \"point\",\r\n            \"coordinates\": [\r\n                89,\r\n                -89\r\n            ]\r\n        },\r\n        \"envelope\": {\r\n            \"type\": \"envelope\",\r\n            \"coordinates\": [\r\n                [\r\n                    89.123,\r\n                    -89.123\r\n                ],\r\n                [\r\n                    89.122,\r\n                    -88.122\r\n                ]\r\n            ]\r\n        },\r\n        \"timezone\": \"America/Vancouver\",\r\n        \"isVisible\": true,\r\n        \"minMapZoom\": 123,\r\n        \"maxMapZoom\": 456,\r\n        \"facilities\": [\r\n            { \"pk\": \"parkingLot\", \"sk\": \"1\" },\r\n            { \"pk\": \"parkingLot\", \"sk\": \"2\" }\r\n        ],\r\n        \"activities\": [\r\n            { \"pk\": \"dayuse\", \"sk\": \"1\" }\r\n        ]\r\n    },\r\n    {\r\n        \"displayName\": \"Cheakamus 5\",\r\n        \"gzCollectionId\": \"997\",\r\n        \"orcs\": 997,\r\n        \"schema\": \"geozone\",\r\n        \"location\": {\r\n            \"type\": \"point\",\r\n            \"coordinates\": [\r\n                88,\r\n                -88\r\n            ]\r\n        },\r\n        \"envelope\": {\r\n            \"type\": \"envelope\",\r\n            \"coordinates\": [\r\n                [\r\n                    88.123,\r\n                    -88.123\r\n                ],\r\n                [\r\n                    88.122,\r\n                    -88.122\r\n                ]\r\n            ]\r\n        },\r\n        \"timezone\": \"America/Vancouver\",\r\n        \"isVisible\": true,\r\n        \"minMapZoom\": 123,\r\n        \"maxMapZoom\": 456,\r\n        \"facilities\": [\r\n            { \"pk\": \"parkingLot\", \"sk\": \"1\" },\r\n            { \"pk\": \"parkingLot\", \"sk\": \"2\" }\r\n        ],\r\n        \"activities\": [\r\n            { \"pk\": \"dayuse\", \"sk\": \"1\" }\r\n        ]\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/geozones/:gzcollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"geozones",
										":gzcollectionid"
									],
									"variable": [
										{
											"key": "gzcollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Put Geozone by Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update geozones",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"displayName\": \"New Cheakamus 1\",\r\n        \"geozoneId\": \"1\"\r\n    },\r\n    {\r\n        \"displayName\": \"New Cheakamus 2\",\r\n        \"activities\": [\r\n            { \"pk\": \"dayuse\", \"sk\": \"9\" }\r\n        ],\r\n        \"geozoneId\": \"2\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/geozones/:gzcollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"geozones",
										":gzcollectionid"
									],
									"variable": [
										{
											"key": "gzcollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Geozone by Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has items with schema, identifier, and displayName\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array').that.is.not.empty;",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('schema');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('identifier');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('displayName');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/geozones/:gzcollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"geozones",
										":gzcollectionid"
									],
									"variable": [
										{
											"key": "gzcollectionid",
											"value": "bcparks::7"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Geozone by Collection Geozone ID",
					"item": [
						{
							"name": "Put Geozone by Collection Geozone ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update protected areas",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"Newer Cheakamus\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/geozones/:gzcollectionid?geozoneId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"geozones",
										":gzcollectionid"
									],
									"query": [
										{
											"key": "geozoneId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "gzcollectionid",
											"value": "bcparks_7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Geozone by Collection Geozone ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('data');",
											"    pm.expect(pm.response.json()).to.have.property('msg');",
											"    pm.expect(pm.response.json()).to.have.property('context');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/geozones/:gzcollectionid?geozoneId=4",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"geozones",
										":gzcollectionid"
									],
									"query": [
										{
											"key": "geozoneId",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "gzcollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Geozone by Collection Geozone ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body has expected properties\", function () {",
											"    pm.response.to.have.jsonBody('code', 200);",
											"    pm.response.to.have.jsonBody('data', true);",
											"    pm.response.to.have.jsonBody('msg', \"Success\");",
											"    pm.response.to.have.jsonBody('error', null);",
											"    pm.response.to.have.jsonBody('context');",
											"});",
											"",
											"const bearerToken = pm.environment.get('bearer_token');",
											"const gzCollectionId = 'bcparks::7';",
											"",
											"// Run the DELETE request with geozoneId=4",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/geozones/${gzCollectionId}/?geozoneId=4`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/geozones/${gzCollectionId}/?geozoneId=5`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/geozones/:gzcollectionid?geozoneId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"geozones",
										":gzcollectionid"
									],
									"query": [
										{
											"key": "geozoneId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "gzcollectionid",
											"value": "bcparks_7"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Protected Areas",
			"item": [
				{
					"name": "Protected Area by ORCS",
					"item": [
						{
							"name": "Geozone",
							"item": [
								{
									"name": "Get Geozone by Protected Area",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/protected-areas/:orcs/subareas?subareaId=1&fetchActivities=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"protected-areas",
												":orcs",
												"subareas"
											],
											"query": [
												{
													"key": "subareaId",
													"value": "1"
												},
												{
													"key": "fetchActivities",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "orcs",
													"value": "8"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Activity",
							"item": [
								{
									"name": "ActivityType and ActivityId",
									"item": [
										{
											"name": "Products",
											"item": [
												{
													"name": "Get Products",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{base_url}}/protected-areas/:orcs/activities/:activityType/:activityId/products",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"protected-areas",
																":orcs",
																"activities",
																":activityType",
																":activityId",
																"products"
															],
															"variable": [
																{
																	"key": "orcs",
																	"value": "7"
																},
																{
																	"key": "activityType",
																	"value": "dayuse"
																},
																{
																	"key": "activityId",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Get Activity by Orcs, ActivityType, ActivityId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/protected-areas/:orcs/activities/:activityType/:activityId",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"protected-areas",
														":orcs",
														"activities",
														":activityType",
														":activityId"
													],
													"variable": [
														{
															"key": "orcs",
															"value": "8"
														},
														{
															"key": "activityType",
															"value": ""
														},
														{
															"key": "activityId",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Activity by Protected Area",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/protected-areas/:orcs/activities?activityType=dayuse&activityId=3&fetchProducts=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"protected-areas",
												":orcs",
												"activities"
											],
											"query": [
												{
													"key": "activityType",
													"value": "dayuse"
												},
												{
													"key": "activityId",
													"value": "3"
												},
												{
													"key": "fetchProducts",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "orcs",
													"value": "8"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Facility",
							"item": [
								{
									"name": "Get Facility by Protected Area",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/protected-areas/:orcs/facilities?facilityType=parking&facilityId=1&fetchActivities=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"protected-areas",
												":orcs",
												"facilities"
											],
											"query": [
												{
													"key": "facilityType",
													"value": "parking"
												},
												{
													"key": "facilityId",
													"value": "1"
												},
												{
													"key": "fetchActivities",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "orcs",
													"value": "15"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Protected Area By ORCS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.response.to.have.jsonBody(\"data\");",
											"    pm.response.to.have.jsonBody(\"msg\");",
											"    pm.response.to.have.jsonBody(\"context\");",
											"});",
											"",
											"// Test for response body data field value",
											"pm.test(\"Data field value is true\", function () {",
											"    pm.expect(pm.response.json().data).to.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"pk\": \"protectedArea\",\r\n   \"sk\": \"999\",\r\n   \"orcs\": 999,\r\n   \"displayName\": \"Whole New Protected Area\",\r\n   \"schema\": \"protectedArea\",\r\n   \"location\": {\r\n      \"type\": \"Point\",\r\n      \"coordinates\": [\r\n         89,\r\n         -89\r\n      ]\r\n   },\r\n   \"boundary\": {\r\n      \"type\": \"Polygon\",\r\n      \"coordinates\": [\r\n         [\r\n            [\r\n               89.123,\r\n               -89.123\r\n            ],\r\n            [\r\n               88.122,\r\n               -88.122\r\n            ],\r\n            [\r\n               87.121,\r\n               -87.121\r\n            ],\r\n            [\r\n               86.12,\r\n               -86.12\r\n            ]\r\n         ]\r\n      ]\r\n   },\r\n   \"boundaryUrl\": \"http://s3.amazonaws.com/bucket/\",\r\n   \"timezone\": \"America/Vancouver\",\r\n   \"minMapZoom\": 100,\r\n   \"maxMapZoom\": 125,\r\n   \"imageUrl\": \"www.example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/protected-areas/:orcs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"protected-areas",
										":orcs"
									],
									"variable": [
										{
											"key": "orcs",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Protected Area By ORCS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update protected areas",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Strathcona 2 Electric Boogaloo\",\r\n  \"location\": {\r\n    \"type\": \"Point\",\r\n    \"coordinates\": [0.123, -0.123]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/protected-areas/:orcs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"protected-areas",
										":orcs"
									],
									"variable": [
										{
											"key": "orcs",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Protected Area by ORCS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body has items with schema, identifier, and displayName\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('object').that.is.not.empty;",
											"    pm.expect(pm.response.json().data.items).to.have.property('schema');",
											"    pm.expect(pm.response.json().data.items).to.have.property('identifier');",
											"    pm.expect(pm.response.json().data.items).to.have.property('displayName');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protected-areas/:orcs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"protected-areas",
										":orcs"
									],
									"variable": [
										{
											"key": "orcs",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Geozone by Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body has expected properties\", function () {",
											"    pm.response.to.have.jsonBody('code', 200);",
											"    pm.response.to.have.jsonBody('data', true);",
											"    pm.response.to.have.jsonBody('msg', \"Success\");",
											"    pm.response.to.have.jsonBody('error', null);",
											"    pm.response.to.have.jsonBody('context');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protected-areas/:orcs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"protected-areas",
										":orcs"
									],
									"variable": [
										{
											"key": "orcs",
											"value": "999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Batch Create Protected Areas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has data, msg, and context\", function () {",
									"    pm.response.to.have.jsonBody(\"data\");",
									"    pm.response.to.have.jsonBody(\"msg\");",
									"    pm.response.to.have.jsonBody(\"context\");",
									"});",
									"",
									"// Test for response body data field value",
									"pm.test(\"Data field value is true\", function () {",
									"    pm.expect(pm.response.json().data).to.equal(true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n      \"pk\": \"protectedArea\",\r\n      \"sk\": \"998\",\r\n      \"orcs\": 998,\r\n      \"displayName\": \"Whole New Protected Area\",\r\n      \"schema\": \"protectedArea\",\r\n      \"location\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            89,\r\n            -89\r\n         ]\r\n      },\r\n      \"boundary\": {\r\n         \"type\": \"Polygon\",\r\n         \"coordinates\": [\r\n            [\r\n               [\r\n                  89.123,\r\n                  -89.123\r\n               ],\r\n               [\r\n                  88.122,\r\n                  -88.122\r\n               ],\r\n               [\r\n                  87.121,\r\n                  -87.121\r\n               ],\r\n               [\r\n                  86.12,\r\n                  -86.12\r\n               ]\r\n            ]\r\n         ]\r\n      },\r\n      \"boundaryUrl\": \"http://s3.amazonaws.com/bucket/\",\r\n      \"timezone\": \"America/Vancouver\",\r\n      \"minMapZoom\": 100,\r\n      \"maxMapZoom\": 125,\r\n      \"imageUrl\": \"www.example.com\"\r\n   },\r\n   {\r\n      \"pk\": \"protectedArea\",\r\n      \"sk\": \"999\",\r\n      \"orcs\": 999,\r\n      \"displayName\": \"Another New Protected Area\",\r\n      \"schema\": \"protectedArea\",\r\n      \"location\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            89,\r\n            -89\r\n         ]\r\n      },\r\n      \"boundary\": {\r\n         \"type\": \"Polygon\",\r\n         \"coordinates\": [\r\n            [\r\n               [\r\n                  89.123,\r\n                  -89.123\r\n               ],\r\n               [\r\n                  88.122,\r\n                  -88.122\r\n               ],\r\n               [\r\n                  87.121,\r\n                  -87.121\r\n               ],\r\n               [\r\n                  86.12,\r\n                  -86.12\r\n               ]\r\n            ]\r\n         ]\r\n      },\r\n      \"boundaryUrl\": \"http://s3.amazonaws.com/bucket/\",\r\n      \"timezone\": \"America/Vancouver\",\r\n      \"minMapZoom\": 100,\r\n      \"maxMapZoom\": 125,\r\n      \"imageUrl\": \"www.example.com\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/protected-areas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"protected-areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Protected Areas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has data, msg, and context\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('data');",
									"    pm.expect(pm.response.json()).to.have.property('msg');",
									"    pm.expect(pm.response.json()).to.have.property('context');",
									"});",
									"",
									"// Test for data items array",
									"pm.test(\"Data items array is empty\", function () {",
									"    pm.expect(pm.response.json().data.items).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/protected-areas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"protected-areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch Delete Protected Areas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has expected properties\", function () {",
									"    pm.response.to.have.jsonBody('code', 200);",
									"    pm.response.to.have.jsonBody('data', true);",
									"    pm.response.to.have.jsonBody('msg', \"Success\");",
									"    pm.response.to.have.jsonBody('error', null);",
									"    pm.response.to.have.jsonBody('context');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n      \"sk\": \"998\"\r\n   },\r\n   {\r\n      \"sk\": \"999\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/protected-areas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"protected-areas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Facilities",
			"item": [
				{
					"name": "Facility by Facility Collection Id",
					"item": [
						{
							"name": "Batch Post Facilities by Facility Collection Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.response.to.have.jsonBody(\"data\");",
											"    pm.response.to.have.jsonBody(\"msg\");",
											"    pm.response.to.have.jsonBody(\"context\");",
											"});",
											"",
											"// Test for response body data field value",
											"pm.test(\"Data field value is true\", function () {",
											"    pm.expect(pm.response.json().data).to.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"orcs\": 997,\r\n        \"fcCollectionId\": \"bcparks_997\",\r\n        \"displayName\": \"Musacheak Lake\",\r\n        \"description\": \"a lake\",\r\n        \"schema\": \"facility\",\r\n        \"facilityType\": \"naturalFeature\",\r\n        \"facilitySubType\": \"lake\",\r\n        \"address\": \"8675 Road St.\",\r\n        \"geozone\": \"geozone::bcparks::997#3\",\r\n        \"activities\": [{ \"pk\": \"activity::bcparks_1\", \"sk\": \"backcountryCamp::1\" }, { \"pk\": \"activity::bcparks_1\", \"sk\": \"backcountryCamp::2\" }],\r\n        \"isVisible\": true,\r\n        \"timezone\": \"America/Vancouver\",\r\n        \"location\": {\r\n            \"type\": \"point\",\r\n            \"coordinates\": [\r\n                89.234,\r\n                -89.234\r\n            ]\r\n        },\r\n        \"minMapZoom\": 123,\r\n        \"maxMapZoom\": 456,\r\n        \"showOnMap\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Musacheak\"\r\n    },\r\n    {\r\n        \"orcs\": 997,\r\n        \"fcCollectionId\": \"bcparks_997\",\r\n        \"displayName\": \"Musacheak Peak\",\r\n        \"description\": \"a mountain\",\r\n        \"schema\": \"facility\",\r\n        \"facilityType\": \"naturalFeature\",\r\n        \"facilitySubType\": \"summit\",\r\n        \"address\": \"8675 Road St.\",\r\n        \"geozone\": \"geozone::bcparks::997#3\",\r\n        \"activities\": [{ \"pk\": \"activity::bcparks_1\", \"sk\": \"backcountryCamp::1\" }, { \"pk\": \"activity::bcparks_1\", \"sk\": \"backcountryCamp::2\" }],\r\n        \"isVisible\": true,\r\n        \"timezone\": \"America/Vancouver\",\r\n        \"location\": {\r\n            \"type\": \"point\",\r\n            \"coordinates\": [\r\n                89.234,\r\n                -89.234\r\n            ]\r\n        },\r\n        \"minMapZoom\": 123,\r\n        \"maxMapZoom\": 456,\r\n        \"showOnMap\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Musacheak\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/facilities/:fccollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fccollectionid"
									],
									"variable": [
										{
											"key": "fccollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Put Facilities by Facility Collection Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update protected areas",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"displayName\": \"New Musacheak Side Parking Lot\",\r\n        \"facilityType\": \"naturalFeature\",\r\n        \"facilityId\": 1\r\n    },\r\n    {\r\n        \"displayName\": \"New Musacheak Overflow Parking Lot\",\r\n        \"facilityType\": \"naturalFeature\",\r\n        \"facilityId\": 2\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/facilities/:fccollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fccollectionid"
									],
									"variable": [
										{
											"key": "fccollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Facility by Facility Collection Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has items with schema, identifier, and displayName\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array').that.is.not.empty;",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('schema');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('identifier');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('displayName');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/facilities/:fcCollectionId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fcCollectionId"
									],
									"variable": [
										{
											"key": "fcCollectionId",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Facility by Facility Type",
					"item": [
						{
							"name": "Batch Post Facilities by Facility Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.response.to.have.jsonBody(\"data\");",
											"    pm.response.to.have.jsonBody(\"msg\");",
											"    pm.response.to.have.jsonBody(\"context\");",
											"});",
											"",
											"// Test for response body data field value",
											"pm.test(\"Data field value is true\", function () {",
											"    pm.expect(pm.response.json().data).to.equal(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"orcs\": 998,\r\n        \"fcCollectionId\": \"bcparks_998\",\r\n        \"displayName\": \"Musacheak Side Parking Lot\",\r\n        \"description\": \"Where you park your car\",\r\n        \"schema\": \"facility\",\r\n        \"facilitySubType\": \"parkingLot\",\r\n        \"address\": \"8675 Road St.\",\r\n        \"geozone\": \"geozone::bcparks::998#3\",\r\n        \"isVisible\": true,\r\n        \"timezone\": \"America/Vancouver\",\r\n        \"location\": {\r\n            \"type\": \"point\",\r\n            \"coordinates\": [\r\n                89.234,\r\n                -89.234\r\n            ]\r\n        },\r\n        \"minMapZoom\": 123,\r\n        \"maxMapZoom\": 456,\r\n        \"showOnMap\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Musacheak\",\r\n        \"activities\": [{ \"pk\": \"dayuse\", \"sk\": \"1\" }]\r\n    },\r\n    {\r\n        \"orcs\": 998,\r\n        \"fcCollectionId\": \"bcparks_998\",\r\n        \"displayName\": \"Musacheak Side Parking Lot\",\r\n        \"description\": \"Where you park your car\",\r\n        \"schema\": \"facility\",\r\n        \"facilitySubType\": \"parkingLot\",\r\n        \"address\": \"8675 Road St.\",\r\n        \"geozone\": \"geozone::bcparks::998#3\",\r\n        \"isVisible\": true,\r\n        \"timezone\": \"America/Vancouver\",\r\n        \"location\": {\r\n            \"type\": \"point\",\r\n            \"coordinates\": [\r\n                89.234,\r\n                -89.234\r\n            ]\r\n        },\r\n        \"minMapZoom\": 123,\r\n        \"maxMapZoom\": 456,\r\n        \"showOnMap\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Musacheak\",\r\n        \"activities\": [{ \"pk\": \"dayuse\", \"sk\": \"1\" }]\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/facilities/:fccollectionid?facilityType=structure",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fccollectionid"
									],
									"query": [
										{
											"key": "facilityType",
											"value": "structure"
										}
									],
									"variable": [
										{
											"key": "fccollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Put Facilities by Facility Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update geozones",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"displayName\": \"New Cheakamus Side Parking Lot\",\r\n        \"facilityId\": 1\r\n    },\r\n    {\r\n        \"displayName\": \"New Cheakamus Overflow Parking Lot\",\r\n        \"facilityId\": 2\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/facilities/:fccollectionid?facilityType=structure",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fccollectionid"
									],
									"query": [
										{
											"key": "facilityType",
											"value": "structure"
										}
									],
									"variable": [
										{
											"key": "fccollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Facility by Facility Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has items with schema, identifier, and displayName\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array').that.is.not.empty;",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('schema');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('identifier');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('displayName');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/facilities/:fccollectionid?facilityType=structure",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fccollectionid"
									],
									"query": [
										{
											"key": "facilityType",
											"value": "structure"
										}
									],
									"variable": [
										{
											"key": "fccollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Facility by Facility ID",
					"item": [
						{
							"name": "Put Facility by Facility ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update geozones",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"New Name for Cheakamus Main Parking Lot\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/facilities/:fccollectionid?facilityType=structure&facilityId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fccollectionid"
									],
									"query": [
										{
											"key": "facilityType",
											"value": "structure"
										},
										{
											"key": "facilityId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "fccollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Facility by Facility ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data).to.be.an('object');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/facilities/:fcCollectionId?facilityType=parking&facilityId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":fcCollectionId"
									],
									"query": [
										{
											"key": "facilityType",
											"value": "parking"
										},
										{
											"key": "facilityId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "fcCollectionId",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Facility by Facility ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body has expected properties\", function () {",
											"    pm.response.to.have.jsonBody('code', 200);",
											"    pm.response.to.have.jsonBody('data', true);",
											"    pm.response.to.have.jsonBody('msg', \"Success\");",
											"    pm.response.to.have.jsonBody('error', null);",
											"    pm.response.to.have.jsonBody('context');",
											"});",
											"",
											"const bearerToken = pm.environment.get('bearer_token');",
											"const facilityType = 'parking';",
											"",
											"// Run the DELETEs for batch requests",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/facilities/998/?facilityType=${facilityType}&facilityId=1`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/facilities/998/?facilityType=${facilityType}&facilityId=2`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/facilities/997/?facilityType=${facilityType}&facilityId=1`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/facilities/997/?facilityType=${facilityType}&facilityId=2`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/facilities/:facCollectionId?facilityType=structure&facilityId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"facilities",
										":facCollectionId"
									],
									"query": [
										{
											"key": "facilityType",
											"value": "structure"
										},
										{
											"key": "facilityId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "facCollectionId",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Policies",
			"item": [
				{
					"name": "Policies by Policy Types",
					"item": [
						{
							"name": "Policy by Policy ID",
							"item": [
								{
									"name": "Get Policy By Policy ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/policies/:policyType/:policyId",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"policies",
												":policyType",
												":policyId"
											],
											"variable": [
												{
													"key": "policyType",
													"value": ""
												},
												{
													"key": "policyId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Single Policy",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/policies/:policyType/:policyId",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"policies",
												":policyType",
												":policyId"
											],
											"variable": [
												{
													"key": "policyType",
													"value": "booking"
												},
												{
													"key": "policyId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create Policy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/policies/:policyType",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								":policyType"
							],
							"variable": [
								{
									"key": "policyType",
									"value": "booking"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Policies By Policy Type",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/policies/:policyType",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies",
								":policyType"
							],
							"variable": [
								{
									"key": "policyType",
									"value": "booking"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Policies",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/policies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subareas",
			"item": [
				{
					"name": "Get subareas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/subareas?orcs=8&subareaId=1&fetchActivities=true&fetchFacilities=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"subareas"
							],
							"query": [
								{
									"key": "orcs",
									"value": "8"
								},
								{
									"key": "subareaId",
									"value": "1"
								},
								{
									"key": "fetchActivities",
									"value": "true"
								},
								{
									"key": "fetchFacilities",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activities",
			"item": [
				{
					"name": "Activity by Activity Collection ID",
					"item": [
						{
							"name": "Batch Post Activities Activity Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.response.to.have.jsonBody(\"data\");",
											"    pm.response.to.have.jsonBody(\"msg\");",
											"    pm.response.to.have.jsonBody(\"context\");",
											"});",
											"",
											"// Test for response body data field value",
											"pm.test(\"Data field value is true\", function () {",
											"    pm.expect(pm.response.json().data).to.equal(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"orcs\": 997,\r\n        \"displayName\": \"Dayuse Spot 2 at Cheakamus\",\r\n        \"description\": \"Hiking trail south side\",\r\n        \"schema\": \"activity\",\r\n        \"activityType\": \"dayuse\",\r\n        \"activitySubType\": \"vehicleParking\",\r\n        \"geozone\": {\r\n            \"pk\": \"geozone::bcparks_997\",\r\n            \"sk\": \"1\"\r\n        },\r\n        \"facilities\": [\r\n            \"parkingLot::1\"\r\n        ],\r\n        \"isVisible\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Cheakamus\"\r\n    },\r\n    {\r\n        \"orcs\": 997,\r\n        \"displayName\": \"Dayuse Spot 2 at Cheakamus\",\r\n        \"description\": \"Hiking trail north side\",\r\n        \"schema\": \"activity\",\r\n        \"activityType\": \"dayuse\",\r\n        \"activitySubType\": \"vehicleParking\",\r\n        \"geozone\": {\r\n            \"pk\": \"geozone::bcparks_997\",\r\n            \"sk\": \"2\"\r\n        },\r\n        \"facilities\": [\r\n            \"parkingLot::1\"\r\n        ],\r\n        \"isVisible\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Cheakamus\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/activities/:orcs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":orcs"
									],
									"variable": [
										{
											"key": "orcs",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Put Activities Activity Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update protected areas",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"activityId\": \"1\",\r\n        \"activityType\": \"dayuse\",\r\n        \"displayName\": \"Hiking trail renamed\"\r\n    },\r\n    {\r\n        \"activityId\": \"2\",\r\n        \"activityType\": \"dayuse\",\r\n        \"displayName\": \"Hiking trail renamed here too\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/activities/:accollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":accollectionid"
									],
									"variable": [
										{
											"key": "accollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Activity Activity Collection ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has items with schema, identifier, and displayName\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array').that.is.not.empty;",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('schema');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('identifier');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('displayName');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/activities/:accollectionid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":accollectionid"
									],
									"variable": [
										{
											"key": "accollectionid",
											"value": "bcparks_997"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Activity by Activity Type",
					"item": [
						{
							"name": "Batch Post Activities by Activity Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has data, msg, and context\", function () {",
											"    pm.response.to.have.jsonBody(\"data\");",
											"    pm.response.to.have.jsonBody(\"msg\");",
											"    pm.response.to.have.jsonBody(\"context\");",
											"});",
											"",
											"// Test for response body data field value",
											"pm.test(\"Data field value is true\", function () {",
											"    pm.expect(pm.response.json().data).to.equal(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"orcs\": 998,\r\n        \"displayName\": \"Dayuse Spot 2 at Cheakamus\",\r\n        \"description\": \"Hiking trail south side\",\r\n        \"schema\": \"activity\",\r\n        \"activityType\": \"dayuse\",\r\n        \"activitySubType\": \"vehicleParking\",\r\n        \"geozone\": {\r\n            \"pk\": \"geozone::bcparks_998\",\r\n            \"sk\": \"1\"\r\n        },\r\n        \"facilities\": [\r\n             \"parkingLot::1\"\r\n        ],\r\n        \"isVisible\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Cheakamus\"\r\n    },\r\n    {\r\n        \"orcs\": 998,\r\n        \"displayName\": \"Dayuse Spot 2 at Cheakamus\",\r\n        \"description\": \"Hiking trail south side\",\r\n        \"schema\": \"activity\",\r\n        \"activityType\": \"dayuse\",\r\n        \"activitySubType\": \"vehicleParking\",\r\n        \"geozone\": {\r\n            \"pk\": \"geozone::bcparks_998\",\r\n            \"sk\": \"1\"\r\n        },\r\n        \"facilities\": [\r\n             \"parkingLot::1\"\r\n        ],\r\n        \"isVisible\": true,\r\n        \"imageUrl\": \"www.example.com\",\r\n        \"searchTerms\": \"Cheakamus\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/activities/:accollectionid?activityType=dayuse",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":accollectionid"
									],
									"query": [
										{
											"key": "activityType",
											"value": "dayuse"
										}
									],
									"variable": [
										{
											"key": "accollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Put Activities by Activity Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update protected areas",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"activityId\": \"1\",\r\n        \"displayName\": \"Dayuse Spot 1 New Name Here\"\r\n    },\r\n    {\r\n        \"activityId\": \"2\",\r\n        \"displayName\": \"Dayuse Spot 2 New Name Here\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/activities/:accollectionid?activityType=dayuse",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":accollectionid"
									],
									"query": [
										{
											"key": "activityType",
											"value": "dayuse"
										}
									],
									"variable": [
										{
											"key": "accollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Activity by Activity Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has items with schema, identifier, and displayName\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array').that.is.not.empty;",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('schema');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('identifier');",
											"    pm.expect(pm.response.json().data.items[0]).to.have.property('displayName');",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data.items).to.be.an('array');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/activities/:orcs?activityType=dayuse",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":orcs"
									],
									"query": [
										{
											"key": "activityType",
											"value": "dayuse"
										}
									],
									"variable": [
										{
											"key": "orcs",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Activity by Activity ID",
					"item": [
						{
							"name": "Put Activity by Activity ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the PUT request to update protected areas",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"Dayuse Spot 2 New Name Here\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/activities/:accollectionid?activityType=dayuse&activityId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":accollectionid"
									],
									"query": [
										{
											"key": "activityType",
											"value": "dayuse"
										},
										{
											"key": "activityId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "accollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Activity by Activity ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for data items array",
											"pm.test(\"Data items array is empty\", function () {",
											"    pm.expect(pm.response.json().data).to.be.an('object');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/activities/:accollectionid?activityType=dayuse&activityId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":accollectionid"
									],
									"query": [
										{
											"key": "activityType",
											"value": "dayuse"
										},
										{
											"key": "activityId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "accollectionid",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Activity by Activity ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body has expected properties\", function () {",
											"    pm.response.to.have.jsonBody('code', 200);",
											"    pm.response.to.have.jsonBody('data', true);",
											"    pm.response.to.have.jsonBody('msg', \"Success\");",
											"    pm.response.to.have.jsonBody('error', null);",
											"    pm.response.to.have.jsonBody('context');",
											"});",
											"",
											"const bearerToken = pm.environment.get('bearer_token');",
											"const activityType = 'dayuse';",
											"",
											"// Run the DELETEs for batch requests",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/activities/998/?activityType=${activityType}&activityId=1`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/activities/998/?activityType=${activityType}&activityId=2`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/activities/997/?activityType=${activityType}&activityId=1`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: pm.variables.replaceIn(`{{base_url}}/activities/997/?activityType=${activityType}&activityId=2`),",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${bearerToken}`",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/activities/:orcs?activityType=dayuse&activityId=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"activities",
										":orcs"
									],
									"query": [
										{
											"key": "activityType",
											"value": "dayuse"
										},
										{
											"key": "activityId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "orcs",
											"value": "bcparks_998"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?orcs=7&activityType=dayuse&activityId=1&productId=1&fetchPolicies=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "orcs",
									"value": "7"
								},
								{
									"key": "activityType",
									"value": "dayuse"
								},
								{
									"key": "activityId",
									"value": "1"
								},
								{
									"key": "productId",
									"value": "1"
								},
								{
									"key": "fetchPolicies",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{x-api-key}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/search",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "type",
							"value": "backcountryRegistration",
							"disabled": true
						},
						{
							"key": "startFrom",
							"value": "4",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "20",
							"disabled": true
						},
						{
							"key": "status",
							"value": "historical",
							"disabled": true
						},
						{
							"key": "sortField",
							"value": "effectiveDate",
							"disabled": true
						},
						{
							"key": "type",
							"value": "opDate",
							"disabled": true
						},
						{
							"key": "startDate",
							"value": "2024-11-06",
							"disabled": true
						},
						{
							"key": "endDate",
							"value": "2024-11-08",
							"disabled": true
						},
						{
							"key": "category",
							"value": "permit",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Permit Search",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{x-api-key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/search/permits",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"search",
						"permits"
					],
					"query": [
						{
							"key": "type",
							"value": "backcountryRegistration",
							"disabled": true
						},
						{
							"key": "startFrom",
							"value": "4",
							"disabled": true
						},
						{
							"key": "text",
							"value": "joffre",
							"disabled": true
						},
						{
							"key": "status",
							"value": "historical",
							"disabled": true
						},
						{
							"key": "sortField",
							"value": "effectiveDate",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "2",
							"disabled": true
						},
						{
							"key": "startDate",
							"value": "2024-11-06",
							"disabled": true
						},
						{
							"key": "endDate",
							"value": "2024-11-08",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "redirect_uri",
				"value": "{{callback_url}}",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "clientId",
				"value": "{{cognito_client_id}}",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{cognito_auth_url}}/login",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{cognito_auth_url}}/oauth2/token",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "{{token_name}}",
				"type": "string"
			},
			{
				"key": "refreshRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "tokenRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "authRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}
