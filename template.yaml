AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  reserve-rec-api SAM deployment for BC Parks


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        IS_OFFLINE: false
        DYNAMODB_ENDPOINT_URL: https://dynamodb.ca-central-1.amazonaws.com

Parameters:
  TableName:
    Type: String
    Default: 'reserve-rec'
  TableNameAudit:
    Type: String
    Default: 'Audit'
  Stage:
    Type: String
    Default: api
  AccountId:
    Type: String
    Default: '637423314715'
  DomainName:
    Description: User-defined OpenSearch domain name
    Type: String
    Default: 'reserve-rec'
  KMSKeyId:
    Type: String
    Default: 'arn:aws:kms:ca-central-1:637423314715:alias/aws/es'
  InstanceCount:
    Type: Number
    Default: 1
  InstanceType:
    Type: String
    Default: 't3.small.search'
  OpenSearchMainIndex:
    Type: String
    Default: 'main-index'
  EBSIops:
    Type: String
    Default: 3000
  DataRegisterEndpoint:
    Type: String
    Default: 'https://dev-data.bcparks.ca/api'
  DataRegisterApiKey:
    Type: String
    Default: 'dev-api'
  CognitoUserPoolName:
    Type: String
    Default: 'public'
  CognitoUserPoolClientName:
    Type: String
    Default: 'public-web-app'
  IdentityPoolName:
    Type: String
    Default: 'ReserveRecIdentity'
  Project:
    Type: String
    Default: 'reserve-rec'
  GoogleAppId:
    Type: String
  GoogleAppSecret:
    Type: String
  CMSAPIEndpoint:
    Type: String
    Default: 'https://cms.bcparks.ca/api'
  TantalisAPIEndpoint:
    Type: String
    Default: 'https://openmaps.gov.bc.ca/geo/pub/WHSE_TANTALIS.TA_PARK_ECORES_PA_SVW/ows'
  CognitoCallbackURL:
    Type: String
  Environment:
    Type: String

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
  Audit:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableNameAudit
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
    DependsOn: DynamoDBTable

  ## Roles
  StreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: 'ProcessDynamoDBStreamRolePolicyOne'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                Resource: !Sub
                  - 'arn:aws:dynamodb:ca-central-1:${AccountId}:table/Audit'
                  - AccountId: !Ref AccountId
                Effect: Allow
        - PolicyName: 'ProcessDynamoDBStreamRolePolicyTwo'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !Sub
                  - 'arn:aws:es:ca-central-1:${AccountId}:domain/reserve-rec/*'
                  - AccountId: !Ref AccountId
                Effect: Allow

  ### API ###
  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  ### LAMBDA LAYERS ###
  BaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: base
      Description: Common Base Tooling Layer
      ContentUri: layers/base/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  AWSUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: awsUtils
      Description: Common AWS Tooling Layer
      ContentUri: layers/awsUtils/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  DataUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dataUtils
      Description: Utilities, tools and helper functions specific to PDR data
      ContentUri: layers/dataUtils/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  CloudFrontAPICachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: "Custom CloudFront Caching Policy to allow the Authorization header through to the Origins."
        DefaultTTL: 1
        MaxTTL: 1
        MinTTL: 1
        Name: !Sub "${ApiDeployment}-CFCachePolicy"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Authorization
          QueryStringsConfig:
            QueryStringBehavior: all

  ### LAMBDAS ###

  # Data Register Integration
  SyncDataRegisterFunction:
    FunctionName: SyncDataRegisterFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/synchronization/syncDataRegister/
      Handler: index.handler
      Runtime: nodejs20.x
      Description: Syncs Data Register protected areas every day at 08:00 UTC (00:00 PDT)
      MemorySize: 512
      Timeout: 900
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
            # TableName: !Ref TableNameAudit
      Environment:
        Variables:
          LOG_LEVEL: info
          DATA_REGISTER_ENDPOINT: !Ref DataRegisterEndpoint
          DATA_REGISTER_API_KEY: !Ref DataRegisterApiKey
      Events:
        UpdateProtectedAreas:
          Type: Schedule
          Properties:
            Name: "SyncDataRegisterFunctionSchedule"
            Schedule: cron(0 8 * * ? *)
            Description: "Sync Data Register protected areas every day at 08:00 UTC (00:00 PDT)"

  # CMS Integration
  SyncCMSProtectedAreasFunction:
    FunctionName: SyncCMSProtectedAreasFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/synchronization/syncCMSProtectedAreas/
      Handler: index.handler
      Runtime: nodejs20.x
      Description: Syncs CMS protected areas on demand
      MemorySize: 512
      Timeout: 900
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          LOG_LEVEL: info
          CMS_ENDPOINT_URL: !Ref CMSAPIEndpoint

  # Tantalis Integration
  SyncTantalisProtectedAreasFunction:
    FunctionName: SyncTantalisProtectedAreasFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/synchronization/syncTantalisProtectedAreas/
      Handler: index.handler
      Runtime: nodejs20.x
      Description: Syncs Tantalis protected areas on demand
      MemorySize: 512
      Timeout: 900
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          LOG_LEVEL: info
          TANTALIS_ENDPOINT_URL: !Ref TantalisAPIEndpoint
          OPENSEARCH_ENDPOINT_URL: !Sub
            - 'https://${Domain}/'
            - Domain: !GetAtt OpenSearch.DomainEndpoint

  SearchFunction:
    FunctionName: SearchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/search
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 20
      Description: Search Handler
      Policies:
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref DomainName
      Environment:
        Variables:
          LOG_LEVEL: info
          OPENSEARCH_MAIN_INDEX: !Ref OpenSearchMainIndex
          OPENSEARCH_DOMAIN_ENDPOINT: !Sub
            - 'https://${Domain}/'
            - Domain: !GetAtt OpenSearch.DomainEndpoint
      Events:
        SearchGet:
          Type: Api
          Properties:
            Path: /search
            Method: GET
            RestApiId: !Ref ApiDeployment
        SearchOptions:
          Type: Api
          Properties:
            Path: /search
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment

  ## Protected Areas ##
  ProtectedAreasGet:
    FunctionName: ProtectedAreasGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/protectedAreas/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 20
      Description: Get Protected Areas lambda function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          LOG_LEVEL: info
          TABLE_NAME: !Ref TableName
      Events:
        ProtectedAreasGet:
          Type: Api
          Properties:
            Path: /protected-areas
            Method: GET
            RestApiId: !Ref ApiDeployment
        SearchOptions:
          Type: Api
          Properties:
            Path: /protected-areas
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment

  ProtectedAreaGet:
    FunctionName: ProtectedAreaGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/protectedAreas/_orcs/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 20
      Description: Get single Protected Area lambda function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          LOG_LEVEL: info
          TABLE_NAME: !Ref TableName
      Events:
        ProtectedAreasGet:
          Type: Api
          Properties:
            Path: /protected-areas/{orcs}
            Method: GET
            RestApiId: !Ref ApiDeployment
        SearchOptions:
          Type: Api
          Properties:
            Path: /protected-areas/{orcs}
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment

  ProtectedAreasPut:
    FunctionName: ProtectedAreasPut
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/protectedAreas/PUT
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 20
      Description: Put bulk Protected Areas lambda function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          LOG_LEVEL: info
          TABLE_NAME: !Ref TableName
      Events:
        ProtectedAreaPut:
          Type: Api
          Properties:
            Path: /protected-areas
            Method: PUT
            RestApiId: !Ref ApiDeployment

  ProtectedAreaPut:
    FunctionName: ProtectedAreaPut
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/protectedAreas/_orcs/PUT
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 20
      Description: Put single Protected Area lambda function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          LOG_LEVEL: info
          TABLE_NAME: !Ref TableName
      Events:
        ProtectedAreaPut:
          Type: Api
          Properties:
            Path: /protected-areas/{orcs}
            Method: PUT
            RestApiId: !Ref ApiDeployment


  ## Opensearch
  OpenSearch:
    Type: AWS::OpenSearchService::Domain
    DependsOn: StreamRole
    Properties:
      DomainName: !Ref DomainName
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !Ref InstanceCount
        InstanceType: !Ref InstanceType
        MultiAZWithStandbyEnabled: false
        WarmEnabled: false
        ZoneAwarenessEnabled: false
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref KMSKeyId
      DomainEndpointOptions:
        EnforceHTTPS: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt StreamRole.Arn
      EBSOptions:
        EBSEnabled: true
        Iops: !Ref EBSIops
        VolumeSize: '10'
        Throughput: '125'
        VolumeType: 'gp3'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !GetAtt StreamRole.Arn

  ### DYNAMODB TABLES ###
  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/dynamoStream/
      Handler: index.handler
      Role: !GetAtt StreamRole.Arn
      MemorySize: 512
      Timeout: 60
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs18.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
            TableName: !Ref TableNameAudit
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref DomainName
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBTable.StreamArn
            BatchSize: 10
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          LOG_LEVEL: info
          OPENSEARCH_MAIN_INDEX: !Ref OpenSearchMainIndex
          OPENSEARCH_DOMAIN_ENDPOINT: !Sub
            - 'https://${Domain}/'
            - Domain: !GetAtt OpenSearch.DomainEndpoint

 # Config
  ConfigGet:
    FunctionName: ConfigGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/config/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Config GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ConfigGet:
          Type: Api
          Properties:
            Path: /config
            Method: GET
            RestApiId: !Ref ApiDeployment
            # Auth:
            #   ApiKeyRequired: false
            #   Authorizer: NONE
            #   OverrideApiAuth: true
        ConfigOptions:
          Type: Api
          Properties:
            Path: /config
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            # Auth:
            #   ApiKeyRequired: false
            #   Authorizer: NONE
            #   OverrideApiAuth: true

  # Cognito
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      DeletionProtection: ACTIVE
      AutoVerifiedAttributes:
        - "email"
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: "8"
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: "verified_email"
            Priority: 1

  GoogleUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    DependsOn: [CognitoUserPool]
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: !Ref GoogleAppId
        client_secret: !Ref GoogleAppSecret
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: [GoogleUserPoolIdentityProvider, CognitoUserPool]
    Properties:
      ClientName: !Ref CognitoUserPoolClientName
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - Google
      GenerateSecret: false # enabling this will break the frontend login
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs: !Split [',', !Ref CognitoCallbackURLs]
      LogoutURLs: !Split [',', !Ref CognitoCallbackURLs]
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      TokenValidityUnits:
        IdToken: days
        AccessToken: days
        RefreshToken: days
      IdTokenValidity: 1 # from five minutes to one day
      AccessTokenValidity: 1 # from five minutes to one day
      RefreshTokenValidity: 30 # from 60 minutes to 10 years.

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: [CognitoUserPool]
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub "${Project}-${Environment}"

  UserPoolUICustomization:
    Type: AWS::Cognito::UserPoolUICustomizationAttachment
    DependsOn: [CognitoUserPool]
    DependsOn: UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientId: 'ALL'
      CSS: |
        .banner-customizable {
          background-color: #6E6F6E;
          padding: 2em 0;
        }
        .background-customizable {
          background-color: #FAFAFA;
        }
        .submitButton-customizable {
          background-color: #6E6F6E;
        }
        .submitButton-customizable:hover {
          background-color: #6E6F6E;
        }
        .inputField-customizable {
          border-color: #FAFAFA;
        }
        .inputField-customizable:focus {
          border-color: #6E6F6E;
        }

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    DependsOn: [CognitoUserPool, CognitoUserPoolClient]
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    DependsOn: [IdentityPool]
    Properties:
      RoleName: !Sub "${Project}-${Environment}-cognito-authorized"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              "StringEquals":
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    DependsOn: [IdentityPool, CognitoAuthorizedRole]
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn

Outputs:
  DynamoDBTable:
    Description: The DynamoDB table for Reservations
    Value: !Ref DynamoDBTable
    Export:
      Name: DynamoDBTable-Export

  ProtectedAreasGetEndpoint:
    Description: The Protected Areas GET endpoint
    Value: !Sub 'https://${ApiDeployment}.execute-api.ca-central-1.amazonaws.com/${Stage}/protected-areas'
    Export:
      Name: ProtectedAreasGetEndpoint-Export

  ProtectedAreaGetEndpoint:
    Description: The Protected Area GET endpoint
    Value: !Sub 'https://${ApiDeployment}.execute-api.ca-central-1.amazonaws.com/${Stage}/protected-areas/{orcs}'
    Export:
      Name: ProtectedAreaGetEndpoint-Export